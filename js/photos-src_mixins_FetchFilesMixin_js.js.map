{"version":3,"file":"photos-src_mixins_FetchFilesMixin_js.js?v=feae3942ddd503c2a936","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///photos/src/mixins/FetchFilesMixin.js","webpack:///photos/src/services/PhotoSearch.js"],"sourcesContent":["/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport moment from '@nextcloud/moment';\nimport logger from '../services/logger.js';\nimport getPhotos from '../services/PhotoSearch.js';\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js';\nimport AbortControllerMixin from './AbortControllerMixin.js';\nexport default {\n  name: 'FetchFilesMixin',\n  mixins: [AbortControllerMixin],\n  data() {\n    const dateTimeUpperBound = undefined;\n    const dateTimeLowerBound = moment().subtract(4, 'months');\n    return {\n      errorFetchingFiles: null,\n      loadingFiles: false,\n      doneFetchingFiles: false,\n      fetchSemaphore: new SemaphoreWithPriority(1),\n      fetchedFileIds: [],\n      dateTimeUpperBound,\n      dateTimeLowerBound,\n      timeWindowSteps: 4,\n      firstResultOffset: 0\n    };\n  },\n  watch: {\n    '$route.path'() {\n      this.resetFetchFilesState();\n    }\n  },\n  methods: {\n    /**\n     * @param {string} path - Path to pass to getPhotos.\n     * @param {object} options - Options to pass to getPhotos.\n     * @param {string[]} [blacklist=[]] - Array of ids to filter out.\n     * @param {boolean} [force=false] - Force fetching even if doneFetchingFiles is true\n     * @return {Promise<string[]>} - The next batch of data depending on global offset.\n     */\n    async fetchFiles() {\n      let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let blacklist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      let force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      if (this.doneFetchingFiles && !force || this.loadingFiles) {\n        return [];\n      }\n      const fetchSemaphoreSymbol = await this.fetchSemaphore.acquire();\n      try {\n        this.errorFetchingFiles = null;\n        this.loadingFiles = true;\n        const numberOfImagesPerBatch = 200;\n        logger.debug(`[FetchFilesMixin] Fetching file between ${this.dateTimeUpperBound?.format('L')} 'and' ${this.dateTimeLowerBound?.format('L')}`);\n\n        // Load next batch of images\n        const fetchedFiles = await getPhotos(path, {\n          firstResult: this.firstResultOffset,\n          nbResults: numberOfImagesPerBatch,\n          dateTimeUpperBound: this.dateTimeUpperBound?.unix(),\n          dateTimeLowerBound: this.dateTimeLowerBound?.unix(),\n          ...options,\n          signal: this.abortController.signal\n        });\n        if (fetchedFiles.length === numberOfImagesPerBatch) {\n          // If we have the same number of files than as requested\n          // then the time window probably contains more, so we simply bump the first result offset.\n          this.firstResultOffset += fetchedFiles.length;\n        } else if (fetchedFiles.length === 0 && this.firstResultOffset === 0) {\n          // If we tried a new window and it is empty\n          if (this.dateTimeUpperBound === undefined && this.dateTimeLowerBound === undefined) {\n            // if upper bound has been cleared, then we are done fetching files.\n            this.doneFetchingFiles = true;\n          } else if (this.dateTimeLowerBound === undefined) {\n            // else if lower bound has been cleared, then we clear upper bound\n            // this will allow the server to return all files with either empty or above than now original date time\n            this.dateTimeUpperBound = undefined;\n          } else if (this.dateTimeUpperBound === undefined) {\n            this.dateTimeUpperBound = this.dateTimeLowerBound;\n          } else if (this.timeWindowSteps === 64) {\n            // else if we reach 64 months, we clear the lower bound.\n            this.dateTimeUpperBound = this.dateTimeLowerBound;\n            this.dateTimeLowerBound = undefined;\n          } else {\n            // else we progressively increase the time window until we reach 64 months (3 requests)\n            this.timeWindowSteps *= 4;\n            this.dateTimeUpperBound = this.dateTimeLowerBound;\n            this.dateTimeLowerBound = moment(this.dateTimeLowerBound).subtract(this.timeWindowSteps, 'months');\n          }\n        } else if (fetchedFiles.length !== numberOfImagesPerBatch) {\n          // If we get less files than requested,\n          // we are at the end for the current time window, so we move to the next one.\n          this.timeWindowSteps = 4;\n          this.dateTimeUpperBound = this.dateTimeLowerBound;\n          if (this.dateTimeUpperBound !== undefined) {\n            this.dateTimeLowerBound = moment(this.dateTimeUpperBound).subtract(this.timeWindowSteps, 'months');\n          } else {\n            this.doneFetchingFiles = true;\n          }\n        }\n        const fileIds = fetchedFiles.map(file => file.fileid).filter(fileId => !this.fetchedFileIds.includes(fileId.toString())); // Filter to prevent duplicate fileIds.\n\n        this.fetchedFileIds.push(...fileIds.map(fileId => fileId.toString()).filter(fileId => !blacklist.includes(fileId)));\n        this.$store.dispatch('appendFiles', fetchedFiles);\n        logger.debug(`[FetchFilesMixin] Fetched ${fileIds.length} new files: `, fileIds);\n        return fileIds;\n      } catch (error) {\n        if (error.response?.status === 404) {\n          this.errorFetchingFiles = 404;\n        } else if (error.code === 'ERR_CANCELED') {\n          return [];\n        } else {\n          this.errorFetchingFiles = error;\n        }\n\n        // cancelled request, moving on...\n        logger.error('Error fetching files', {\n          error\n        });\n        console.error(error);\n      } finally {\n        this.loadingFiles = false;\n        this.fetchSemaphore.release(fetchSemaphoreSymbol);\n      }\n      return [];\n    },\n    resetFetchFilesState() {\n      this.doneFetchingFiles = false;\n      this.errorFetchingFiles = null;\n      this.loadingFiles = false;\n      this.timeWindowSteps = 4;\n      this.dateTimeUpperBound = undefined;\n      this.dateTimeLowerBound = moment(this.dateTimeUpperBound).subtract(this.timeWindowSteps, 'months');\n      this.fetchedFileIds = [];\n    }\n  }\n};","/**\n * @copyright Copyright (c) 2019 John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @author John Molakvoæ <skjnldsv@protonmail.com>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { genFileInfo } from '../utils/fileUtils.js';\nimport { getCurrentUser } from '@nextcloud/auth';\nimport { allMimes } from './AllowedMimes.js';\nimport client from './DavClient.js';\nimport { props } from './DavRequest.js';\nimport moment from '@nextcloud/moment';\nconst eqFavorites = `\n\t<d:eq>\n\t\t<d:prop>\n\t\t\t<oc:favorite/>\n\t\t</d:prop>\n\t\t<d:literal>1</d:literal>\n\t</d:eq>`;\nconst metadataNotNull = `\n\t<d:not>\n\t\t<d:is-defined>\n\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t</d:is-defined>\n\t</d:not>`;\nconst orderByMetadata = `\n\t<d:order>\n\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t<d:descending/>\n\t</d:order>`;\nconst orderByLastModified = `\n\t<d:>\n\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t<d:descending/>\n\t</d: order >`;\n\n/**\n * List files from a folder and filter out unwanted mimes\n *\n * @param {object} path the lookup path\n * @param {object} [opts] used for the cancellable requests\n * @param {number} [opts.firstResult=0] Index of the first result that we want (starts at 0)\n * @param {number} [opts.nbResults=200] The number of file to fetch\n * @param {string[]} [opts.mimesType=allMimes] Mime type of the files\n * @param {boolean} [opts.full=false] get full data of the files\n * @param {boolean} [opts.onThisDay=false] get only items from this day of year\n * @param {boolean} [opts.onlyFavorites=false] get only favorite items\n * @param {number} [opts.dateTimeUpperBound] limit the search to photos taken before this lower bound\n * @param {number} [opts.dateTimeLowerBound] limit the search to photos taken after this lower bound\n * @return {Promise<object[]>} the file list\n */\nexport default async function photosSearch() {\n  let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // default function options\n  const options = {\n    firstResult: 0,\n    nbResults: 200,\n    mimesType: allMimes,\n    onThisDay: false,\n    onlyFavorites: false,\n    ...opts\n  };\n  const prefixPath = `/files/${getCurrentUser()?.uid}`;\n\n  // generating the search or condition\n  // based on the allowed mimetypes\n  const orMime = getMtimeConstraint(options.mimesType);\n  const favorites = options.onlyFavorites ? eqFavorites : '';\n  const onThisDay = options.onThisDay ? getOnThisDayConstraint() : '';\n  // To improve the performance of the request, we create time boundaries to limit the number of file that the requests handles in the DB.\n  // Having constraints on both last modified (mtime) and metadata-original_taken_date in the same request does not improve performance\n  // But having two requests with boundaries on one property and then the other, drastically increase the performances.\n  // So here we are with this little hack.\n  // We do not need this hack when onThisDay and onlyFavorites constraints are on.\n  const timeBoundaries = !options.onThisDay && !options.onlyFavorites ? getTimeBoundariesConstraint(options.dateTimeUpperBound, options.dateTimeLowerBound) : [[]];\n  const requests = timeBoundaries.map(_ref => {\n    let [timeBoundaries] = _ref;\n    const requestParams = {\n      ...options,\n      method: 'SEARCH',\n      headers: {\n        'content-Type': 'text/xml'\n      },\n      deep: true,\n      details: true,\n      data: getSearchRequestData(prefixPath, path, `<d:and>${[orMime, favorites, onThisDay, ...timeBoundaries].join('\\n')}</d:and>`, [orderByMetadata, orderByLastModified].join('\\n'), options)\n    };\n    return client.getDirectoryContents('', requestParams);\n  });\n  const responses = await Promise.all(requests);\n  return responses.flat().data.map(data => genFileInfo(data));\n}\n\n/**\n *\n * @param {string} prefixPath\n * @param {string} path\n * @param {string} constraints\n * @param {string} orderBy\n * @param {object} options\n * @param {number} options.firstResult\n * @param {number} options.nbResults\n */\nfunction getSearchRequestData(prefixPath, path, constraints, orderBy, options) {\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<d:searchrequest xmlns:d=\"DAV:\"\n\t\txmlns:oc=\"http://owncloud.org/ns\"\n\t\txmlns:nc=\"http://nextcloud.org/ns\"\n\t\txmlns:ns=\"https://github.com/icewind1991/SearchDAV/ns\"\n\t\txmlns:ocs=\"http://open-collaboration-services.org/ns\">\n\t\t<d:basicsearch>\n\t\t\t<d:select>\n\t\t\t\t<d:prop>\n\t\t\t\t\t${props}\n\t\t\t\t</d:prop>\n\t\t\t</d:select>\n\t\t\t<d:from>\n\t\t\t\t<d:scope>\n\t\t\t\t\t<d:href>${prefixPath}/${path}</d:href>\n\t\t\t\t\t<d:depth>infinity</d:depth>\n\t\t\t\t</d:scope>\n\t\t\t</d:from>\n\t\t\t<d:where>\n\t\t\t\t${constraints}\n\t\t\t</d:where>\n\t\t\t<d:orderby>${orderBy}</d:orderby>\n\t\t\t<d:limit>\n\t\t\t\t<d:nresults>${options.nbResults}</d:nresults>\n\t\t\t\t<ns:firstresult>${options.firstResult}</ns:firstresult>\n\t\t\t</d:limit>\n\t\t</d:basicsearch>\n\t</d:searchrequest>`;\n}\n\n/**\n *\n * @param {string[]} mimesType\n */\nfunction getMtimeConstraint(mimesType) {\n  const mtimeConstraints = mimesType.map((str, mime) => `${str}\n\t\t\t\t<d:eq>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getcontenttype/>\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${mime}</d:literal>\n\t\t\t\t</d:eq>\n\t\t\t`).join('');\n  return `<d:or>${mtimeConstraints}</d:or>`;\n}\nfunction getOnThisDayConstraint() {\n  const targetedDays = Array(20).fill(1).map((_, years) => {\n    const start = moment(Date.now()).startOf('day').subtract(3, 'd').subtract(years + 1, 'y');\n    const end = moment(Date.now()).endOf('day').add(3, 'd').subtract(years + 1, 'y');\n    return `\n\t\t\t\t<d:and>\n\t\t\t\t\t<d:gt>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t\t<d:literal>${start.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t\t</d:gt>\n\t\t\t\t\t<d:lt>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t\t<d:literal>${end.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t\t</d:lt>\n\t\t\t\t</d:and>\n\t\t\t`;\n  }).join('\\n');\n  return `<d:or>${targetedDays}</d:or>`;\n}\n\n/**\n *\n * @param {number} [upperBound]\n * @param {number} [lowerBound]\n */\nfunction getTimeBoundariesConstraint(upperBound, lowerBound) {\n  const timeBoundariesMetadata = [];\n  const timeBoundariesLastModified = [metadataNotNull];\n  if (upperBound !== undefined) {\n    timeBoundariesMetadata.push(`\n\t\t\t<d:lte>\n\t\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t\t\t<d:literal>${upperBound}</d:literal>\n\t\t\t</d:lte>`);\n    timeBoundariesLastModified.push(`\n\t\t\t<d:lte>\n\t\t\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t\t\t<d:literal>${upperBound}</d:literal>\n\t\t\t</d:lte>`);\n  }\n  if (lowerBound !== undefined) {\n    timeBoundariesMetadata.push(`\n\t\t\t<d:gt>\n\t\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t\t\t<d:literal>${lowerBound}</d:literal>\n\t\t\t</d:gt>`);\n    timeBoundariesLastModified.push(`\n\t\t\t<d:gt>\n\t\t\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t\t\t<d:literal>${lowerBound}</d:literal>\n\t\t\t</d:gt>`);\n  }\n  return [timeBoundariesMetadata, timeBoundariesLastModified];\n}"],"names":[],"sourceRoot":""}
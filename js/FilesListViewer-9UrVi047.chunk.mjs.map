{"version":3,"file":"FilesListViewer-9UrVi047.chunk.mjs","sources":["../src/mixins/FilesSelectionMixin.js","../node_modules/vue-material-design-icons/PackageVariant.vue","../src/services/TiledLayout.js","../src/components/TiledLayout/TiledLayout.vue","../src/components/VirtualScrolling.vue","../src/components/FilesListViewer.vue"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nexport default {\n\tname: 'FilesSelectionMixin',\n\n\tdata() {\n\t\treturn {\n\t\t\t/** @type {Object<string, boolean>} */\n\t\t\tselection: {},\n\t\t}\n\t},\n\n\twatch: {\n\t\t$route() {\n\t\t\tthis.resetSelection()\n\t\t},\n\t},\n\n\tmethods: {\n\t\tonFileSelectToggle({ id, value }) {\n\t\t\tthis.$set(this.selection, id, value)\n\t\t},\n\n\t\t/**\n\t\t * @param {string[]} filesIds - The ids of the files to uncheck.\n\t\t */\n\t\tonUncheckFiles(filesIds) {\n\t\t\tfilesIds.forEach((/** @type {string} */ filesId) => this.$set(this.selection, filesId, false))\n\t\t},\n\n\t\tresetSelection() {\n\t\t\tthis.selection = {}\n\t\t},\n\t},\n\n\tcomputed: {\n\t\t/**\n\t\t * @return {string[]}\n\t\t */\n\t\tselectedFileIds() {\n\t\t\treturn Object.keys(this.selection).filter(fileId => this.selection[fileId])\n\t\t},\n\t},\n}\n","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"title ? null : 'true'\"\n        :aria-label=\"title\"\n        class=\"material-design-icon package-variant-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M2,10.96C1.5,10.68 1.35,10.07 1.63,9.59L3.13,7C3.24,6.8 3.41,6.66 3.6,6.58L11.43,2.18C11.59,2.06 11.79,2 12,2C12.21,2 12.41,2.06 12.57,2.18L20.47,6.62C20.66,6.72 20.82,6.88 20.91,7.08L22.36,9.6C22.64,10.08 22.47,10.69 22,10.96L21,11.54V16.5C21,16.88 20.79,17.21 20.47,17.38L12.57,21.82C12.41,21.94 12.21,22 12,22C11.79,22 11.59,21.94 11.43,21.82L3.53,17.38C3.21,17.21 3,16.88 3,16.5V10.96C2.7,11.13 2.32,11.14 2,10.96M12,4.15V4.15L12,10.85V10.85L17.96,7.5L12,4.15M5,15.91L11,19.29V12.58L5,9.21V15.91M19,15.91V12.69L14,15.59C13.67,15.77 13.3,15.76 13,15.6V19.29L19,15.91M13.85,13.36L20.13,9.73L19.55,8.72L13.27,12.35L13.85,13.36Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"PackageVariantIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","/**\n * SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\n/**\n * @typedef {object} TiledItem\n * @property {string} id - Unique id for the item.\n * @property {number} width Real width of the item.\n * @property {number} height Real height of the item.\n * @property {number} ratio The aspect ratio of the item.\n */\n\n/**\n * @typedef {object} Section\n * @property {string} id - Unique id for the section.\n * @property {TiledItem[]} items Real width of the item.\n */\n\n/**\n * @typedef {object} TiledRow\n * @property {TiledItem[]} items - List of item in the row.\n * @property {number} height - Height of the row.\n * @property {string} key - Unique key for the row.\n */\n\n/**\n * @typedef {Section} TiledSection\n * @property {string} key - Unique key for the section.\n * @property {TiledRow[]} rows Real width of the item.\n * @property {number} height - Height of the section.\n */\n\n/**\n * Split items in rows of equal width.\n * The last row will not be forced to match containerWidth.\n *\n * @param {TiledItem[]} items The list of item to split in row of equal width.\n * @param {number} containerWidth The width of a row.\n * @param {number} baseHeight The base height of the rows.\n * @return {TiledRow[]}\n */\nexport function splitItemsInRows(items, containerWidth, baseHeight = 200) {\n\tif (containerWidth === 0) {\n\t\treturn []\n\t}\n\n\tconst rows = []\n\tlet rowNumber = 0\n\tlet currentItem = 0\n\n\twhile (currentItem < items.length) {\n\t\t/** @type { TiledItem[] } */\n\t\tconst rowItems = []\n\n\t\t// Fill the row with new items as long as the width is less than containerWidth.\n\t\tdo {\n\t\t\t// @ts-ignore - We know that items.shift() is not undefined as we always check that items.length > 0.\n\t\t\trowItems.push(items[currentItem++])\n\t\t} while (\n\t\t\tcurrentItem < items.length\n\t\t\t&& computeRowWidth([...rowItems, items[currentItem]], baseHeight) <= containerWidth\n\t\t)\n\n\t\tconst rowHeight = computeRowHeight(\n\t\t\trowItems,\n\t\t\tcontainerWidth,\n\t\t\titems.length === currentItem,\n\t\t\tbaseHeight,\n\t\t)\n\n\t\trows[rowNumber] = {\n\t\t\titems: rowItems.map(item => ({ ...item, width: rowHeight * item.ratio, height: rowHeight })),\n\t\t\t// Key to help vue to keep track of the row in VirtualScrolling.\n\t\t\theight: rowHeight,\n\t\t\tkey: rowItems.map(item => item.id).join('-'),\n\t\t}\n\n\t\trowNumber += 1\n\t}\n\n\treturn rows\n}\n\n/**\n *\n * @param {TiledItem[]} items The list of items in the row.\n * @param {number} baseHeight The base height of the rows.\n * @return {number} The width of the row\n */\nfunction computeRowWidth(items, baseHeight) {\n\treturn items\n\t\t.map(item => baseHeight * item.ratio)\n\t\t.reduce((sum, itemWidth) => sum + itemWidth)\n}\n\n/**\n * Compute the row height based on its items and on the container's width.\n *\n * Math time !\n * With Rn the aspect ratio of item n\n *      Wn the width of item n\n *      Hn the height of item n\n *      Wc the width of the container\n *      Hr the height of the row\n * For n items we want: Wc = W1 + W2 + ... + Wn\n * We know Rn = Wn / Hn\n * So Wn = Rn * Hn\n * So Wc = (R1 * H1) + (R2 * H2) + ... + (Rn * Hn)\n * But we also want Hr === H1 === H2 === ... === Hn\n * So Wc = (R1 * Hr) + (R2 * Hr) + ... + (Rn * Hr)\n * So Wc = Hr * (R1 + R2 + ... + Rn)\n * So Hr = Wc / (R1 + R2 + ... + Rn)\n *\n * @param {TiledItem[]} items The list of items in the row.\n * @param {number} containerWidth The width of the row.\n * @param {boolean} isLastRow Whether we are computing the height for the last row.\n * @param {number} baseHeight The base height of the rows.\n * @return {number} The height of the row\n */\nfunction computeRowHeight(items, containerWidth, isLastRow, baseHeight) {\n\tconst sumOfItemsRatio = items\n\t\t.map(item => item.ratio)\n\t\t.reduce((sum, itemRatio) => sum + itemRatio,\n\t\t)\n\n\tlet rowHeight = containerWidth / sumOfItemsRatio\n\n\t// Exception 1: there is only one item which is larger than containerWidth.\n\t// Limit its height so that itemWidth === containerWidth\n\tif (items.length === 1 && items[0].width > containerWidth) {\n\t\trowHeight = containerWidth / items[0].ratio\n\t}\n\n\t// Exception 2: we reached the last row.\n\t// Force the items width to match containerWidth, and limit their height to baseHeight + 20.\n\tif (isLastRow) {\n\t\trowHeight = Math.min(baseHeight + 20, rowHeight)\n\t}\n\n\treturn rowHeight\n}\n","<!--\n  - SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n  - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div ref=\"tiledLayoutContainer\"\n\t\tclass=\"tiled-container\">\n\t\t<!-- Slot to allow changing the rows before passing them to TiledRows -->\n\t\t<!-- Useful for partially rendering rows like with VirtualScrolling -->\n\t\t<slot :tiled-sections=\"tiledSections\">\n\t\t\t<!-- Default rendering -->\n\t\t\t<TiledRows :rows=\"tiledSections\" />\n\t\t</slot>\n\t</div>\n</template>\n\n<script>\nimport logger from '../../services/logger.js'\nimport { splitItemsInRows } from '../../services/TiledLayout.js'\nimport TiledRows from './TiledRows.vue'\n\nexport default {\n\tname: 'TiledLayout',\n\n\tcomponents: {\n\t\tTiledRows,\n\t},\n\n\tprops: {\n\t\t/** @type {import('vue').PropType<import('../VirtualScrolling.vue').Section[]>} */\n\t\tsections: {\n\t\t\ttype: Array,\n\t\t\trequired: true,\n\t\t},\n\t\tbaseHeight: {\n\t\t\ttype: Number,\n\t\t\tdefault: 200,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tcontainerWidth: 0,\n\t\t\t/** @type {ResizeObserver} */\n\t\t\tresizeObserver: null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/** @return {import('../../services/TiledLayout.js').TiledSection[]} */\n\t\ttiledSections() {\n\t\t\tlogger.debug('[TiledLayout] Computing rows', { items: this.sections })\n\n\t\t\treturn this.sections.map(section => {\n\t\t\t\tconst rows = splitItemsInRows(section.items, this.containerWidth, this.baseHeight)\n\t\t\t\treturn {\n\t\t\t\t\t...section,\n\t\t\t\t\tkey: section.id,\n\t\t\t\t\trows: rows.map(row => ({ ...row, sectionKey: section.id })),\n\t\t\t\t\theight: rows.reduce((totalHeight, row) => totalHeight + row.height, 0),\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t},\n\n\tmounted() {\n\t\tthis.resizeObserver = new ResizeObserver(entries => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tconst cr = entry.contentRect\n\t\t\t\tif (entry.target.classList.contains('tiled-container')) {\n\t\t\t\t\tthis.containerWidth = cr.width\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis.resizeObserver.observe(this.$refs.tiledLayoutContainer)\n\t},\n\n\tbeforeDestroy() {\n\t\tthis.resizeObserver.disconnect()\n\t},\n}\n</script>\n\n<style scoped lang=\"scss\">\n.tiled-container {\n\theight: 100%;\n\n\t.tiled-row {\n\t\tdisplay: flex;\n\t}\n}\n</style>\n","<!--\n - SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div v-if=\"!useWindow && containerElement === null\" ref=\"container\" class=\"vs-container\">\n\t\t<div ref=\"rowsContainer\"\n\t\t\tclass=\"vs-rows-container\"\n\t\t\t:style=\"rowsContainerStyle\">\n\t\t\t<slot :visible-sections=\"visibleSections\" />\n\t\t\t<slot name=\"loader\" />\n\t\t</div>\n\t</div>\n\t<div v-else\n\t\tref=\"rowsContainer\"\n\t\tclass=\"vs-rows-container\"\n\t\t:style=\"rowsContainerStyle\">\n\t\t<slot :visible-sections=\"visibleSections\" />\n\t\t<slot name=\"loader\" />\n\t</div>\n</template>\n\n<script>\nimport logger from '../services/logger.js'\n\n/**\n * @typedef {object} Section\n * @property {string} key - Unique key for the section.\n * @property {Row[]} rows - The height of the row.\n * @property {number} height - Height of the section, excluding the header.\n */\n\n/**\n * @typedef {Section} VisibleSection\n * @property {VisibleRow[]} rows - The height of the row.\n */\n\n/**\n * @typedef {object} Row\n * @property {string} key - Unique key for the row.\n * @property {number} height - The height of the row.\n * @property {string} sectionKey - Unique key for the row.\n */\n\n/**\n * @typedef {Row} VisibleRow\n * @property {number} distance - The distance from the visible viewport\n */\n\nexport default {\n\tname: 'VirtualScrolling',\n\n\tprops: {\n\t\t/** @type {import('vue').PropType<Section[]}>} */\n\t\tsections: {\n\t\t\ttype: Array,\n\t\t\trequired: true,\n\t\t},\n\n\t\tcontainerElement: {\n\t\t\ttype: HTMLElement,\n\t\t\tdefault: null,\n\t\t},\n\n\t\tuseWindow: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\n\t\theaderHeight: {\n\t\t\ttype: Number,\n\t\t\tdefault: 75,\n\t\t},\n\t\trenderDistance: {\n\t\t\ttype: Number,\n\t\t\tdefault: 0.5,\n\t\t},\n\t\tbottomBufferRatio: {\n\t\t\ttype: Number,\n\t\t\tdefault: 2,\n\t\t},\n\t\tscrollToKey: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tscrollPosition: 0,\n\t\t\tcontainerHeight: 0,\n\t\t\trowsContainerHeight: 0,\n\t\t\t/** @type {ResizeObserver} */\n\t\t\tresizeObserver: null,\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t/** @return {VisibleSection[]} */\n\t\tvisibleSections() {\n\t\t\tlogger.debug('[VirtualScrolling] Computing visible section', { sections: this.sections })\n\n\t\t\t// Optimisation: get those computed properties once to not go through vue's internal every time we need them.\n\t\t\tconst containerHeight = this.containerHeight\n\t\t\tconst containerTop = this.scrollPosition\n\t\t\tconst containerBottom = containerTop + containerHeight\n\n\t\t\tlet currentRowTop = 0\n\t\t\tlet currentRowBottom = 0\n\n\t\t\t// Compute whether a row should be included in the DOM (shouldRender)\n\t\t\t// And how visible the row is.\n\t\t\tconst visibleSections = this.sections\n\t\t\t\t.map(section => {\n\t\t\t\t\tcurrentRowBottom += this.headerHeight\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...section,\n\t\t\t\t\t\trows: section.rows.reduce((visibleRows, row) => {\n\t\t\t\t\t\t\tcurrentRowTop = currentRowBottom\n\t\t\t\t\t\t\tcurrentRowBottom += row.height\n\n\t\t\t\t\t\t\tlet distance = 0\n\n\t\t\t\t\t\t\tif (currentRowBottom < containerTop) {\n\t\t\t\t\t\t\t\tdistance = (containerTop - currentRowBottom) / containerHeight\n\t\t\t\t\t\t\t} else if (currentRowTop > containerBottom) {\n\t\t\t\t\t\t\t\tdistance = (currentRowTop - containerBottom) / containerHeight\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (distance > this.renderDistance) {\n\t\t\t\t\t\t\t\treturn visibleRows\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t...visibleRows,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...row,\n\t\t\t\t\t\t\t\t\tdistance,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}, []),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(section => section.rows.length > 0)\n\n\t\t\t// To allow vue to recycle the DOM elements instead of adding and deleting new ones,\n\t\t\t// we assign a random key to each items. When a item removed, we recycle its key for new items,\n\t\t\t// so vue can replace the content of removed DOM elements with the content of new items, but keep the other DOM elements untouched.\n\t\t\tconst visibleItems = visibleSections\n\t\t\t\t.flatMap(({ rows }) => rows)\n\t\t\t\t.flatMap(({ items }) => items)\n\n\t\t\tvisibleItems.forEach(item => (item.key = this.rowIdToKeyMap[item.id]))\n\n\t\t\tconst usedTokens = visibleItems\n\t\t\t\t.map(({ key }) => key)\n\t\t\t\t.filter(key => key !== undefined)\n\n\t\t\tconst unusedTokens = Object.values(this.rowIdToKeyMap).filter(key => !usedTokens.includes(key))\n\n\t\t\tvisibleItems\n\t\t\t\t.filter(({ key }) => key === undefined)\n\t\t\t\t.forEach(item => (item.key = unusedTokens.pop() ?? Math.random().toString(36).substr(2)))\n\n\t\t\t// this.rowIdToKeyMap is created in the beforeCreate hook, so value changes are not tracked.\n\t\t\t// Therefore, we wont trigger the computation of visibleSections again if we alter the value of this.rowIdToKeyMap.\n\t\t\t// eslint-disable-next-line vue/no-side-effects-in-computed-properties\n\t\t\tthis.rowIdToKeyMap = visibleItems.reduce((finalMapping, { id, key }) => ({ ...finalMapping, [`${id}`]: key }), {})\n\n\t\t\treturn visibleSections\n\t\t},\n\n\t\t/**\n\t\t * Total height of all the rows + some room for the loader.\n\t\t *\n\t\t * @return {number}\n\t\t */\n\t\ttotalHeight() {\n\t\t\tconst loaderHeight = 200\n\n\t\t\treturn this.sections\n\t\t\t\t.map(section => this.headerHeight + section.height)\n\t\t\t\t.reduce((totalHeight, sectionHeight) => totalHeight + sectionHeight, 0) + loaderHeight\n\t\t},\n\n\t\t/**\n\t\t * @return {number}\n\t\t */\n\t\tpaddingTop() {\n\t\t\tif (this.visibleSections.length === 0) {\n\t\t\t\treturn 0\n\t\t\t}\n\n\t\t\tlet paddingTop = 0\n\n\t\t\tfor (const section of this.sections) {\n\t\t\t\tif (section.key !== this.visibleSections[0].rows[0].sectionKey) {\n\t\t\t\t\tpaddingTop += this.headerHeight + section.height\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tfor (const row of section.rows) {\n\t\t\t\t\tif (row.key === this.visibleSections[0].rows[0].key) {\n\t\t\t\t\t\treturn paddingTop\n\t\t\t\t\t}\n\n\t\t\t\t\tpaddingTop += row.height\n\t\t\t\t}\n\n\t\t\t\tpaddingTop += this.headerHeight\n\t\t\t}\n\n\t\t\treturn paddingTop\n\t\t},\n\n\t\t/**\n\t\t * padding-top is used to replace not included item in the container.\n\t\t *\n\t\t * @return {{heigh: string, paddingTop: string}}\n\t\t */\n\t\trowsContainerStyle() {\n\t\t\treturn {\n\t\t\t\theight: `${this.totalHeight}px`,\n\t\t\t\tpaddingTop: `${this.paddingTop}px`,\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Whether the user is near the bottom.\n\t\t * If true, then the need-content event will be emitted.\n\t\t *\n\t\t * @return {boolean}\n\t\t */\n\t\tisNearBottom() {\n\t\t\tconst buffer = this.containerHeight * this.bottomBufferRatio\n\t\t\treturn this.scrollPosition + this.containerHeight >= this.totalHeight - buffer\n\t\t},\n\n\t\t/**\n\t\t * @return {HTMLElement}\n\t\t */\n\t\tcontainer() {\n\t\t\tlogger.debug('[VirtualScrolling] Computing container')\n\t\t\tif (this.containerElement !== null) {\n\t\t\t\treturn this.containerElement\n\t\t\t} else if (this.useWindow) {\n\t\t\t\treturn window\n\t\t\t} else {\n\t\t\t\treturn this.$refs.container\n\t\t\t}\n\t\t},\n\t},\n\n\twatch: {\n\t\tisNearBottom(value) {\n\t\t\tlogger.debug('[VirtualScrolling] isNearBottom changed', { value })\n\t\t\tif (value) {\n\t\t\t\tthis.$emit('need-content')\n\t\t\t}\n\t\t},\n\n\t\tvisibleSections() {\n\t\t\t// Re-emit need-content when rows is updated and isNearBottom is still true.\n\t\t\t// If the height of added rows is under `bottomBufferRatio`, `isNearBottom` will still be true so we need more content.\n\t\t\tif (this.isNearBottom) {\n\t\t\t\tthis.$emit('need-content')\n\t\t\t}\n\t\t},\n\n\t\tscrollToKey(key) {\n\t\t\tlet currentRowTopDistanceFromTop = 0\n\n\t\t\tfor (const section of this.sections) {\n\t\t\t\tif (section.key !== key) {\n\t\t\t\t\tcurrentRowTopDistanceFromTop += this.headerHeight + section.height\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tlogger.debug('[VirtualScrolling] Scrolling to', { currentRowTopDistanceFromTop })\n\t\t\tthis.$refs.container.scrollTo({ top: currentRowTopDistanceFromTop, behavior: 'smooth' })\n\t\t},\n\t},\n\n\tbeforeCreate() {\n\t\tthis.rowIdToKeyMap = {}\n\t},\n\n\tmounted() {\n\t\tthis.resizeObserver = new ResizeObserver(entries => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tconst cr = entry.contentRect\n\t\t\t\tif (entry.target === this.container) {\n\t\t\t\t\tthis.containerHeight = cr.height\n\t\t\t\t}\n\t\t\t\tif (entry.target.classList.contains('vs-rows-container')) {\n\t\t\t\t\tthis.rowsContainerHeight = cr.height\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tif (this.useWindow) {\n\t\t\twindow.addEventListener('resize', this.updateContainerSize, { passive: true })\n\t\t\tthis.containerHeight = window.innerHeight\n\t\t} else {\n\t\t\tthis.resizeObserver.observe(this.container)\n\t\t}\n\n\t\tthis.resizeObserver.observe(this.$refs.rowsContainer)\n\t\tthis.container.addEventListener('scroll', this.updateScrollPosition, { passive: true })\n\t},\n\n\tbeforeDestroy() {\n\t\tif (this.useWindow) {\n\t\t\twindow.removeEventListener('resize', this.updateContainerSize)\n\t\t}\n\n\t\tthis.resizeObserver.disconnect()\n\t\tthis.container.removeEventListener('scroll', this.updateScrollPosition)\n\t},\n\n\tmethods: {\n\t\tupdateScrollPosition() {\n\t\t\tthis._onScrollHandle ??= requestAnimationFrame(() => {\n\t\t\t\tthis._onScrollHandle = null\n\t\t\t\tif (this.useWindow) {\n\t\t\t\t\tthis.scrollPosition = this.container.scrollY\n\t\t\t\t} else {\n\t\t\t\t\tthis.scrollPosition = this.container.scrollTop\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\n\t\tupdateContainerSize() {\n\t\t\tthis.containerHeight = window.innerHeight\n\t\t},\n\t},\n}\n</script>\n\n<style scoped lang=\"scss\">\n.vs-container {\n\toverflow-y: scroll;\n\theight: 100%;\n}\n\n.vs-rows-container {\n\tbox-sizing: border-box;\n\twill-change: scroll-position, padding;\n\tcontain: layout paint style;\n}\n</style>\n","<!--\n - SPDX-FileCopyrightText: 2022 Nextcloud GmbH and Nextcloud contributors\n - SPDX-License-Identifier: AGPL-3.0-or-later\n-->\n<template>\n\t<div class=\"files-list-viewer\">\n\t\t<NcEmptyContent v-if=\"emptyMessage !== '' && photosCount === 0 && !loading\"\n\t\t\tkey=\"emptycontent\"\n\t\t\t:name=\"emptyMessage\">\n\t\t\t<PackageVariant slot=\"icon\" />\n\t\t</NcEmptyContent>\n\n\t\t<TiledLayout :base-height=\"baseHeight\" :sections=\"itemsBySections\">\n\t\t\t<VirtualScrolling slot-scope=\"{tiledSections}\"\n\t\t\t\t:use-window=\"useWindow\"\n\t\t\t\t:container-element=\"containerElement\"\n\t\t\t\t:sections=\"tiledSections\"\n\t\t\t\t:scroll-to-key=\"scrollToSection\"\n\t\t\t\t:header-height=\"sectionHeaderHeight\"\n\t\t\t\t@need-content=\"needContent\">\n\t\t\t\t<template slot-scope=\"{visibleSections}\">\n\t\t\t\t\t<div v-for=\"section of visibleSections\" :key=\"section.id\">\n\t\t\t\t\t\t<template v-if=\"section.id !== ''\">\n\t\t\t\t\t\t\t<!-- Placeholder when initial loading -->\n\t\t\t\t\t\t\t<div v-if=\"showPlaceholders\"\n\t\t\t\t\t\t\t\tclass=\"files-list-viewer__placeholder\"\n\t\t\t\t\t\t\t\t:style=\"{ 'flex-basis': '100%', height: `${sectionHeaderHeight}px`}\" />\n\t\t\t\t\t\t\t<!-- Real file. -->\n\t\t\t\t\t\t\t<slot v-else\n\t\t\t\t\t\t\t\t:file=\"{id: section.id}\"\n\t\t\t\t\t\t\t\t:is-header=\"true\"\n\t\t\t\t\t\t\t\tclass=\"files-list-viewer__section-header\"\n\t\t\t\t\t\t\t\t:style=\"{ 'flex-basis': '100%', height: `${sectionHeaderHeight}px`}\" />\n\t\t\t\t\t\t</template>\n\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<template v-for=\"(row, rowIndex) of section.rows\">\n\t\t\t\t\t\t\t\t<!--\n\t\t\t\t\t\t\t\t\tWe are subtracting 1 from flex-basis to compensate for rounding issues.\n\t\t\t\t\t\t\t\t\tThe flex algo will then compensate with flex-grow.\n\t\t\t\t\t\t\t\t\t'last-tiled-row' prevents the last row's items from growing.\n\t\t\t\t\t\t\t\t-->\n\t\t\t\t\t\t\t\t<li v-for=\"item of row.items\"\n\t\t\t\t\t\t\t\t\t:key=\"item.key\"\n\t\t\t\t\t\t\t\t\t:class=\"{ 'last-tiled-rows': rowIndex === section.rows.length - 1 }\"\n\t\t\t\t\t\t\t\t\t:style=\"{ 'flex-basis': `${item.width - 1}px`, height: `${item.height}px`}\">\n\t\t\t\t\t\t\t\t\t<!-- Placeholder when initial loading -->\n\t\t\t\t\t\t\t\t\t<div v-if=\"showPlaceholders\" class=\"files-list-viewer__placeholder\" />\n\t\t\t\t\t\t\t\t\t<!-- Real file. -->\n\t\t\t\t\t\t\t\t\t<slot v-else :file=\"item\" :distance=\"row.distance\" />\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<NcLoadingIcon v-if=\"loading && !showPlaceholders\" slot=\"loader\" class=\"files-list-viewer__loader\" />\n\t\t\t</VirtualScrolling>\n\t\t</TiledLayout>\n\t</div>\n</template>\n<script>\nimport { mapActions, mapGetters } from 'vuex'\n\nimport PackageVariant from 'vue-material-design-icons/PackageVariant.vue'\n\nimport { NcEmptyContent, NcLoadingIcon } from '@nextcloud/vue'\nimport { subscribe, unsubscribe } from '@nextcloud/event-bus'\n\nimport TiledLayout from '../components/TiledLayout/TiledLayout.vue'\nimport { fetchFile } from '../services/fileFetcher.ts'\nimport VirtualScrolling from '../components/VirtualScrolling.vue'\n\nexport default {\n\tname: 'FilesListViewer',\n\n\tcomponents: {\n\t\tPackageVariant,\n\t\tNcEmptyContent,\n\t\tNcLoadingIcon,\n\t\tTiledLayout,\n\t\tVirtualScrolling,\n\t},\n\n\tprops: {\n\t\t// Array of file ids that should be rendered.\n\t\tfileIds: {\n\t\t\ttype: Array,\n\t\t\tdefault: undefined,\n\t\t},\n\t\t// An object mapping a list of section to a list of fileIds.\n\t\tfileIdsBySection: {\n\t\t\ttype: Object,\n\t\t\tdefault: undefined,\n\t\t},\n\t\t// The list of sorted sections.\n\t\tsections: {\n\t\t\ttype: Array,\n\t\t\tdefault: undefined,\n\t\t},\n\t\t// Whether we should display a loading indicator.\n\t\tloading: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t\t// Message to display when there is no files.\n\t\temptyMessage: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t\t// The base height to forward to TileLayout.\n\t\tbaseHeight: {\n\t\t\ttype: Number,\n\t\t\tdefault: 200,\n\t\t},\n\t\t// The height to use for section headers.\n\t\tsectionHeaderHeight: {\n\t\t\ttype: Number,\n\t\t\tdefault: 75,\n\t\t},\n\t\t// Instruct VirtualScrolling to scroll to the given section id.\n\t\tscrollToSection: {\n\t\t\ttype: String,\n\t\t\tdefault: '',\n\t\t},\n\t\t// The containerElement props to forward to TileLayout.\n\t\tcontainerElement: {\n\t\t\ttype: HTMLElement,\n\t\t\tdefault: null,\n\t\t},\n\t\t// The useWindow props to forward to TileLayout.\n\t\tuseWindow: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false,\n\t\t},\n\t},\n\n\tdata() {\n\t\treturn {\n\t\t\tplaceholderFiles: Array(20).fill(0).map((_, index) => {\n\t\t\t\tconst height = 200\n\t\t\t\tconst width = this.croppedLayout ? height : height * (1 + Math.random() * 2)\n\t\t\t\treturn {\n\t\t\t\t\tid: index,\n\t\t\t\t\twidth,\n\t\t\t\t\theight,\n\t\t\t\t\tratio: width / height,\n\t\t\t\t}\n\t\t\t}),\n\t\t}\n\t},\n\n\tcomputed: {\n\t\t...mapGetters([\n\t\t\t'files',\n\t\t]),\n\n\t\t/**\n\t\t * @return {boolean} The list of items to pass to TiledLayout.\n\t\t */\n\t\tshowPlaceholders() {\n\t\t\treturn this.loading && (this.fileIds?.length === 0 || this.sections?.length === 0)\n\t\t},\n\n\t\t/**\n\t\t * @return {{id: string, items: import('../services/TiledLayout.js').TiledItem[][]}[]} The list of items to pass to TiledLayout.\n\t\t */\n\t\titemsBySections() {\n\t\t\tif (this.fileIds !== undefined) {\n\t\t\t\tif (this.showPlaceholders) {\n\t\t\t\t\treturn [{ id: '', items: this.placeholderFiles }]\n\t\t\t\t}\n\n\t\t\t\treturn [{\n\t\t\t\t\tid: '',\n\t\t\t\t\titems: this.fileIds\n\t\t\t\t\t\t.filter(fileId => this.files[fileId])\n\t\t\t\t\t\t.map(this.mapFileToItem),\n\t\t\t\t}]\n\t\t\t}\n\n\t\t\tif (this.sections !== undefined) {\n\t\t\t\tif (this.showPlaceholders) {\n\t\t\t\t\treturn [{ id: 'placeholder', items: this.placeholderFiles }]\n\t\t\t\t}\n\n\t\t\t\treturn this.sections.map((sectionId) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: sectionId,\n\t\t\t\t\t\titems: this.fileIdsBySection[sectionId]\n\t\t\t\t\t\t\t.filter(fileId => this.files[fileId])\n\t\t\t\t\t\t\t.map(this.mapFileToItem),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn []\n\t\t},\n\n\t\tphotosCount() {\n\t\t\treturn this.itemsBySections.map(({ items }) => items.length).reduce((total, length) => total + length, 0)\n\t\t},\n\n\t\t/** @return {boolean} The list of items to pass to TiledLayout. */\n\t\tshowLoader() {\n\t\t\treturn this.loading && (this.fileIds?.length !== 0 || this.sections?.length !== 0)\n\t\t},\n\t\tcroppedLayout() {\n\t\t\treturn this.$store.state.userConfig.croppedLayout\n\t\t},\n\t},\n\n\tmounted() {\n\t\tsubscribe('files:node:updated', this.handleFileUpdated)\n\t},\n\n\tdestroyed() {\n\t\tunsubscribe('files:node:updated', this.handleFileUpdated)\n\t},\n\n\tmethods: {\n\t\t...mapActions([\n\t\t\t'appendFiles',\n\t\t]),\n\n\t\t// Ask the parent for more content.\n\t\tneedContent() {\n\t\t\tthis.$emit('need-content')\n\t\t},\n\n\t\t/**\n\t\t * @param {string} fileId\n\t\t * @return {import('../services/TiledLayout.js').TiledItem[]}\n\t\t */\n\t\tmapFileToItem(fileId) {\n\t\t\tconst file = this.files[fileId]\n\t\t\treturn {\n\t\t\t\tid: file.fileid,\n\t\t\t\twidth: file.metadataPhotosSize.width,\n\t\t\t\theight: file.metadataPhotosSize.height,\n\t\t\t\tratio: this.croppedLayout ? 1 : file.metadataPhotosSize.width / file.metadataPhotosSize.height,\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @param {object} data\n\t\t * @param {string} data.fileid - The file id of the updated file.\n\t\t */\n\t\tasync handleFileUpdated({ fileid }) {\n\t\t\tconst fetchedFile = await fetchFile(this.files[fileid].filename)\n\t\t\tthis.appendFiles([fetchedFile])\n\t\t},\n\t},\n}\n</script>\n<style lang=\"scss\" scoped>\n.files-list-viewer {\n\theight: 100%;\n\tposition: relative;\n\n\t&__placeholder {\n\t\tbackground: var(--color-primary-element-light);\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tborder: 2px solid var(--color-main-background); // Use border so create a separation between images.\n\t}\n\n\t.tiled-container {\n\t\tflex-basis: 0;\n\t}\n\n\tul {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\n\t\tli:not(.last-tiled-rows) {\n\t\t\tflex-grow: 1;\n\t\t}\n\t}\n\n\t&__section-header {\n\t\tposition: sticky;\n\t\ttop: 0;\n\t\tz-index: 3;\n\t\tbackground: var(--color-main-background);\n\t}\n\n\t&__loader {\n\t\tmargin: 50px 0;\n\t}\n}\n</style>\n"],"names":["FilesSelectionMixin","id","value","filesIds","filesId","fileId","_sfc_main","splitItemsInRows","items","containerWidth","baseHeight","rows","rowNumber","currentItem","rowItems","computeRowWidth","rowHeight","computeRowHeight","item","sum","itemWidth","isLastRow","sumOfItemsRatio","itemRatio","TiledRows","logger","section","row","totalHeight","entries","entry","cr","containerHeight","containerTop","containerBottom","currentRowTop","currentRowBottom","visibleSections","visibleRows","distance","visibleItems","usedTokens","key","unusedTokens","finalMapping","sectionHeight","paddingTop","buffer","currentRowTopDistanceFromTop","PackageVariant","NcEmptyContent","NcLoadingIcon","TiledLayout","VirtualScrolling","_","index","width","mapGetters","sectionId","total","length","subscribe","unsubscribe","mapActions","file","fileid","fetchedFile","fetchFile"],"mappings":"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","x_google_ignoreList":[1]}
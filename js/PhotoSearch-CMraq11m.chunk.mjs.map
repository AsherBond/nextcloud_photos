{"version":3,"file":"PhotoSearch-CMraq11m.chunk.mjs","sources":["../src/services/PhotoSearch.js"],"sourcesContent":["/**\n * SPDX-FileCopyrightText: 2019 Nextcloud GmbH and Nextcloud contributors\n * SPDX-License-Identifier: AGPL-3.0-or-later\n */\n\nimport moment from '@nextcloud/moment'\nimport store from '../store/index.js'\nimport { joinPaths } from '@nextcloud/paths'\n\nimport { allMimes } from './AllowedMimes.js'\nimport { genFileInfo } from '../utils/fileUtils.js'\nimport { getDefaultDavProps } from './DavRequest.ts'\nimport { davClient } from './DavClient.ts'\nimport { davRootPath } from '@nextcloud/files'\n\n/**\n * List files from a folder and filter out unwanted mimes\n *\n * @param {object} [options] used for the cancellable requests\n * @param {number} [options.firstResult=0] Index of the first result that we want (starts at 0)\n * @param {number} [options.nbResults=200] The number of file to fetch\n * @param {string[]} [options.mimesType=allMimes] Mime type of the files\n * @param {boolean} [options.full=false] get full data of the files\n * @param {boolean} [options.onThisDay=false] get only items from this day of year\n * @param {boolean} [options.onlyFavorites=false] get only favorite items\n * @return {Promise<object[]>} the file list\n */\nexport default async function(options = {}) {\n\t// default function options\n\toptions = {\n\t\tfirstResult: 0,\n\t\tnbResults: 200,\n\t\tmimesType: allMimes,\n\t\tonThisDay: false,\n\t\tonlyFavorites: false,\n\t\t...options,\n\t}\n\n\t// generating the search or condition\n\t// based on the allowed mimetypes\n\tconst orMime = options.mimesType.reduce((str, mime) => `${str}\n\t\t<d:eq>\n\t\t\t<d:prop>\n\t\t\t\t<d:getcontenttype/>\n\t\t\t</d:prop>\n\t\t\t<d:literal>${mime}</d:literal>\n\t\t</d:eq>\n\t`, '')\n\n\tconst eqFavorites = options.onlyFavorites\n\t\t? `<d:eq>\n\t\t\t\t<d:prop>\n\t\t\t\t\t<oc:favorite/>\n\t\t\t\t</d:prop>\n\t\t\t\t<d:literal>1</d:literal>\n\t\t\t</d:eq>`\n\t\t: ''\n\n\tconst onThisDay = options.onThisDay\n\t\t? `<d:or>${Array(20).fill(1)\n\t\t\t.map((_, years) => {\n\t\t\t\tconst start = moment(Date.now()).startOf('day').subtract(3, 'd').subtract(years + 1, 'y')\n\t\t\t\tconst end = moment(Date.now()).endOf('day').add(3, 'd').subtract(years + 1, 'y')\n\t\t\t\treturn `<d:and>\n\t\t\t\t<d:gt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${start.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:gt>\n\t\t\t\t<d:lt>\n\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t<d:getlastmodified />\n\t\t\t\t\t</d:prop>\n\t\t\t\t\t<d:literal>${end.format(moment.defaultFormatUtc)}</d:literal>\n\t\t\t\t</d:lt>\n\t\t\t</d:and>`\n\t\t\t}).join('\\n')}</d:or>`\n\t\t: ''\n\n\tconst sourceFolders = store.state.userConfig.photosSourceFolders\n\t\t.map(folder => `\n\t\t\t<d:scope>\n\t\t\t\t<d:href>${joinPaths(davRootPath, folder)}</d:href>\n\t\t\t\t<d:depth>infinity</d:depth>\n\t\t\t</d:scope>`,\n\t\t)\n\t\t.join('\\n')\n\n\toptions = Object.assign({\n\t\tdata: `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t\t<d:searchrequest xmlns:d=\"DAV:\"\n\t\t\t\txmlns:oc=\"http://owncloud.org/ns\"\n\t\t\t\txmlns:nc=\"http://nextcloud.org/ns\"\n\t\t\t\txmlns:ns=\"https://github.com/icewind1991/SearchDAV/ns\"\n\t\t\t\txmlns:ocs=\"http://open-collaboration-services.org/ns\">\n\t\t\t\t<d:basicsearch>\n\t\t\t\t\t<d:select>\n\t\t\t\t\t\t<d:prop>\n\t\t\t\t\t\t\t${getDefaultDavProps()}\n\t\t\t\t\t\t</d:prop>\n\t\t\t\t\t</d:select>\n\t\t\t\t\t<d:from>\n\t\t\t\t\t\t${sourceFolders}\n\t\t\t\t\t</d:from>\n\t\t\t\t\t<d:where>\n\t\t\t\t\t\t<d:and>\n\t\t\t\t\t\t\t<d:or>\n\t\t\t\t\t\t\t\t${orMime}\n\t\t\t\t\t\t\t</d:or>\n\t\t\t\t\t\t\t${eqFavorites}\n\t\t\t\t\t\t\t${onThisDay}\n\t\t\t\t\t\t</d:and>\n\t\t\t\t\t</d:where>\n\t\t\t\t\t<d:orderby>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><nc:metadata-photos-original_date_time/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t\t<d:order>\n\t\t\t\t\t\t\t<d:prop><d:getlastmodified/></d:prop>\n\t\t\t\t\t\t\t<d:descending/>\n\t\t\t\t\t\t</d:order>\n\t\t\t\t\t</d:orderby>\n\t\t\t\t\t<d:limit>\n\t\t\t\t\t\t<d:nresults>${options.nbResults}</d:nresults>\n\t\t\t\t\t\t<ns:firstresult>${options.firstResult}</ns:firstresult>\n\t\t\t\t\t</d:limit>\n\t\t\t\t</d:basicsearch>\n\t\t\t</d:searchrequest>`,\n\t\tdeep: true,\n\t\tdetails: true,\n\t}, options)\n\n\tconst response = await davClient.search('/', options)\n\n\treturn response.data.results.map((data) => genFileInfo(data))\n}\n"],"names":["getPhotos","options","allMimes","orMime","str","mime","eqFavorites","onThisDay","_","years","start","moment","end","sourceFolders","store","folder","joinPaths","davRootPath","getDefaultDavProps","davClient","data","genFileInfo"],"mappings":"2LA2Be,eAAAA,EAAeC,EAAU,CAAA,EAAI,CAE3CA,EAAU,CACT,YAAa,EACb,UAAW,IACX,UAAWC,EACX,UAAW,GACX,cAAe,GACf,GAAGD,CACL,EAIC,MAAME,EAASF,EAAQ,UAAU,OAAO,CAACG,EAAKC,IAAS,GAAGD,CAAG;AAAA;AAAA;AAAA;AAAA;AAAA,gBAK9CC,CAAI;AAAA;AAAA,GAEhB,EAAE,EAECC,EAAcL,EAAQ,cACzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAMA,GAEGM,EAAYN,EAAQ,UACvB,SAAS,MAAM,EAAE,EAAE,KAAK,CAAC,EACzB,IAAI,CAACO,EAAGC,IAAU,CAClB,MAAMC,EAAQC,EAAO,KAAK,IAAK,CAAA,EAAE,QAAQ,KAAK,EAAE,SAAS,EAAG,GAAG,EAAE,SAASF,EAAQ,EAAG,GAAG,EAClFG,EAAMD,EAAO,KAAK,IAAK,CAAA,EAAE,MAAM,KAAK,EAAE,IAAI,EAAG,GAAG,EAAE,SAASF,EAAQ,EAAG,GAAG,EAC/E,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKOC,EAAM,OAAOC,EAAO,gBAAgB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMrCC,EAAI,OAAOD,EAAO,gBAAgB,CAAC;AAAA;AAAA,YAGrD,CAAI,EAAE,KAAK;AAAA,CAAI,CAAC,UACZ,GAEGE,EAAgBC,EAAM,MAAM,WAAW,oBAC3C,IAAIC,GAAU;AAAA;AAAA,cAEHC,EAAUC,EAAaF,CAAM,CAAC;AAAA;AAAA,cAG5C,EACG,KAAK;AAAA,CAAI,EAEX,OAAAd,EAAU,OAAO,OAAO,CACvB,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASCiB,EAAoB,CAAA;AAAA;AAAA;AAAA;AAAA,QAIrBL,CAAa;AAAA;AAAA;AAAA;AAAA;AAAA,UAKXV,CAAM;AAAA;AAAA,SAEPG,CAAW;AAAA,SACXC,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAcEN,EAAQ,SAAS;AAAA,wBACbA,EAAQ,WAAW;AAAA;AAAA;AAAA,uBAIzC,KAAM,GACN,QAAS,EACX,EAAIA,CAAO,GAEO,MAAMkB,EAAU,OAAO,IAAKlB,CAAO,GAEpC,KAAK,QAAQ,IAAKmB,GAASC,EAAYD,CAAI,CAAC,CAC7D"}
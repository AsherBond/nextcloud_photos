{"version":3,"file":"photos-src_mixins_FetchCollectionContentMixin_js.js?v=b1dd7d01f6fd8a4b5ed7","mappings":";kdACA,25OA8BA,SACCA,KAAM,8BAENC,KAAI,WACH,MAAO,CACNC,eAAgB,IAAIC,EAAAA,EAAsB,GAC1CC,mBAAmB,EACnBC,wBAAwB,EACxBC,wBAAyB,KACzBC,6BAA8B,KAEhC,EAEAC,OAAQ,CACPC,EAAAA,GAGDC,QAAS,EAAF,MACHC,EAAAA,EAAAA,IAAW,CACb,cACA,iBACA,wBACC,IAOIC,gBAAe,SAACC,EAAoBC,EAAYC,GAAQ,wHACzD,EAAKX,kBAAmB,CAAF,wCAClB,MAAI,OAKwB,OALxB,SAIX,EAAKA,mBAAoB,EACzB,EAAKE,wBAA0B,KAAI,UAEVM,EAAAA,EAAAA,IAAgBC,EAAoB,CAAEG,OAAQ,EAAKC,gBAAgBD,QAAUF,EAAYC,GAAO,OACvE,OAD5CG,EAAa,EAAH,KAChB,EAAKC,eAAe,CAAEC,YAAa,CAACF,KAAc,kBAC3CA,GAAU,qCAEc,OAAb,QAAd,OAAMG,gBAAQ,aAAd,EAAgBC,QAAc,iBACC,OAAlC,EAAKhB,wBAA0B,IAAG,kBAC3B,MAAI,QAGZ,EAAKA,wBAA0B,EAAH,GAC5BiB,EAAAA,EAAAA,MAAa,sDAAuD,CAAEC,MAAK,QAC3EC,EAAAA,EAAAA,IAAU,EAAKC,EAAE,SAAU,gCAA+B,QAE5B,OAF4B,UAE1D,EAAKtB,mBAAoB,EAAK,8CAGxB,MAAI,+DAzBkD,EA0B9D,EASMuB,qBAAoB,SAACd,EAAoBC,EAAYC,GAAsB,sIAAF,GAAZa,EAAU,EAAH,6BAAG,IACxE,EAAKvB,uBAAwB,CAAF,wCACvB,IAAE,uBAGyB,EAAKH,eAAe2B,UAAS,OAI7B,OAJ7BC,EAAuB,EAAH,cAGzB,EAAKvB,6BAA+B,KACpC,EAAKF,wBAAyB,EAAI,WAETsB,EAAAA,EAAAA,IAAqBd,EAAoB,CAAEG,OAAQ,EAAKC,gBAAgBD,QAAUF,EAAYC,GAAO,QAKhG,GAL1BgB,EAAe,EAAH,KACVC,EAAUD,EAAaE,KAAI,SAAAC,GAAI,OAAIA,EAAKC,OAAOC,UAAU,IAE/DR,EAAQS,SAAQ,SAAAC,GAAM,OAAKP,EAAeA,EAAaE,IAAIK,EAAO,IAElE,EAAKC,YAAYR,KAEbA,EAAaS,OAAS,GAAC,kCACpB,EAAKC,OAAOC,OAAO,qBAAsB,CAAE7B,mBAAAA,EAAoBmB,QAAAA,IAAU,iCAGzED,GAAY,qCAEY,OAAb,QAAd,OAAMV,gBAAQ,aAAd,EAAgBC,QAAc,iBACM,OAAvC,EAAKf,6BAA+B,IAAG,kBAChC,IAAE,QAGV,EAAKA,6BAA+B,EAAH,IAEjCkB,EAAAA,EAAAA,IAAU,EAAKC,EAAE,SAAU,sCAC3BH,EAAAA,EAAAA,MAAa,4DAA6D,CAAEC,MAAK,OAAG,QAGnC,OAHmC,UAEpF,EAAKnB,wBAAyB,EAC9B,EAAKH,eAAeyC,QAAQb,GAAqB,8CAG3C,IAAE,+DAtCuE,EAuCjF","sources":["webpack:///photos/src/mixins/FetchCollectionContentMixin.js"],"sourcesContent":["/**\n * @copyright Copyright (c) 2022 Louis Chemineau <louis@chmn.me>\n *\n * @author Louis Chemineau <louis@chmn.me>\n *\n * @license AGPL-3.0-or-later\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\nimport { mapActions } from 'vuex'\n\nimport { showError } from '@nextcloud/dialogs'\n\nimport AbortControllerMixin from './AbortControllerMixin.js'\nimport { fetchCollection, fetchCollectionFiles } from '../services/collectionFetcher.js'\nimport logger from '../services/logger.js'\nimport SemaphoreWithPriority from '../utils/semaphoreWithPriority.js'\n\nexport default {\n\tname: 'FetchCollectionContentMixin',\n\n\tdata() {\n\t\treturn {\n\t\t\tfetchSemaphore: new SemaphoreWithPriority(1),\n\t\t\tloadingCollection: false,\n\t\t\tloadingCollectionFiles: false,\n\t\t\terrorFetchingCollection: null,\n\t\t\terrorFetchingCollectionFiles: null,\n\t\t}\n\t},\n\n\tmixins: [\n\t\tAbortControllerMixin,\n\t],\n\n\tmethods: {\n\t\t...mapActions([\n\t\t\t'appendFiles',\n\t\t\t'addCollections',\n\t\t\t'setCollectionFiles',\n\t\t]),\n\t\t/**\n\t\t * @param {string} collectionFileName\n\t\t * @param {string[]} [extraProps] - Extra properties to add to the DAV request.\n\t\t * @param {import('webdav').WebDAVClient} [client] - The DAV client to use.\n\t\t * @return {Promise<import('../services/collectionFetcher.js').Collection|null>}\n\t\t */\n\t\tasync fetchCollection(collectionFileName, extraProps, client) {\n\t\t\tif (this.loadingCollection) {\n\t\t\t\treturn null\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.loadingCollection = true\n\t\t\t\tthis.errorFetchingCollection = null\n\n\t\t\t\tconst collection = await fetchCollection(collectionFileName, { signal: this.abortController.signal }, extraProps, client)\n\t\t\t\tthis.addCollections({ collections: [collection] })\n\t\t\t\treturn collection\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tthis.errorFetchingCollection = 404\n\t\t\t\t\treturn null\n\t\t\t\t}\n\n\t\t\t\tthis.errorFetchingCollection = error\n\t\t\t\tlogger.error('[PublicCollectionContent] Error fetching collection', { error })\n\t\t\t\tshowError(this.t('photos', 'Failed to fetch collection.'))\n\t\t\t} finally {\n\t\t\t\tthis.loadingCollection = false\n\t\t\t}\n\n\t\t\treturn null\n\t\t},\n\n\t\t/**\n\t\t * @param {string} collectionFileName\n\t\t * @param {string[]} [extraProps] - Extra properties to add to the DAV request.\n\t\t * @param {import('webdav').WebDAVClient} [client] - The DAV client to use.\n\t\t * @param {((value: import('../services/collectionFetcher.js').CollectionFile, index: number, array: import('../services/collectionFetcher.js').CollectionFile[]) => any)[]} [mappers] - Callback that can transform files before they are appended.\n\t\t * @return {Promise<import('../services/collectionFetcher.js').CollectionFile[]>}\n\t\t */\n\t\tasync fetchCollectionFiles(collectionFileName, extraProps, client, mappers = []) {\n\t\t\tif (this.loadingCollectionFiles) {\n\t\t\t\treturn []\n\t\t\t}\n\n\t\t\tconst fetchSemaphoreSymbol = await this.fetchSemaphore.acquire()\n\n\t\t\ttry {\n\t\t\t\tthis.errorFetchingCollectionFiles = null\n\t\t\t\tthis.loadingCollectionFiles = true\n\n\t\t\t\tlet fetchedFiles = await fetchCollectionFiles(collectionFileName, { signal: this.abortController.signal }, extraProps, client)\n\t\t\t\tconst fileIds = fetchedFiles.map(file => file.fileid.toString())\n\n\t\t\t\tmappers.forEach(mapper => (fetchedFiles = fetchedFiles.map(mapper)))\n\n\t\t\t\tthis.appendFiles(fetchedFiles)\n\n\t\t\t\tif (fetchedFiles.length > 0) {\n\t\t\t\t\tawait this.$store.commit('setCollectionFiles', { collectionFileName, fileIds })\n\t\t\t\t}\n\n\t\t\t\treturn fetchedFiles\n\t\t\t} catch (error) {\n\t\t\t\tif (error.response?.status === 404) {\n\t\t\t\t\tthis.errorFetchingCollectionFiles = 404\n\t\t\t\t\treturn []\n\t\t\t\t}\n\n\t\t\t\tthis.errorFetchingCollectionFiles = error\n\n\t\t\t\tshowError(this.t('photos', 'Failed to fetch collections list.'))\n\t\t\t\tlogger.error('[PublicCollectionContent] Error fetching collection files', { error })\n\t\t\t} finally {\n\t\t\t\tthis.loadingCollectionFiles = false\n\t\t\t\tthis.fetchSemaphore.release(fetchSemaphoreSymbol)\n\t\t\t}\n\n\t\t\treturn []\n\t\t},\n\t},\n}\n"],"names":["name","data","fetchSemaphore","SemaphoreWithPriority","loadingCollection","loadingCollectionFiles","errorFetchingCollection","errorFetchingCollectionFiles","mixins","AbortControllerMixin","methods","mapActions","fetchCollection","collectionFileName","extraProps","client","signal","abortController","collection","addCollections","collections","response","status","logger","error","showError","t","fetchCollectionFiles","mappers","acquire","fetchSemaphoreSymbol","fetchedFiles","fileIds","map","file","fileid","toString","forEach","mapper","appendFiles","length","$store","commit","release"],"sourceRoot":""}
<?php

declare(strict_types=1);
/**
 * SPDX-FileCopyrightText: 2021 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

namespace OC\Hooks {
	class Emitter {
		public function emit(string $class, string $value, array $option) {}
		/** Closure $closure */
		public function listen(string $class, string $value, $closure) {}
	}
	class BasicEmitter extends Emitter {
	}
}

namespace OC\Files\Search {
	use OCP\Files\Search\ISearchOperator;
	use OCP\Files\Search\ISearchOrder;
	use OCP\Files\Search\ISearchQuery;
	use OCP\IUser;

	class SearchQuery implements ISearchQuery {
		/** @var ISearchOperator */
		private $searchOperation;
		/** @var integer */
		private $limit;
		/** @var integer */
		private $offset;
		/** @var ISearchOrder[] */
		private $order;
		/** @var ?IUser */
		private $user;
		private $limitToHome;

		/**
		* SearchQuery constructor.
		*
		* @param ISearchOperator $searchOperation
		* @param int $limit
		* @param int $offset
		* @param array $order
		* @param ?IUser $user
		* @param bool $limitToHome
		*/
		public function __construct(
			ISearchOperator $searchOperation,
			int $limit,
			int $offset,
			array $order,
			?IUser $user = null,
			bool $limitToHome = false,
		) {
			$this->searchOperation = $searchOperation;
			$this->limit = $limit;
			$this->offset = $offset;
			$this->order = $order;
			$this->user = $user;
			$this->limitToHome = $limitToHome;
		}

		/**
		* @return ISearchOperator
		*/
		public function getSearchOperation() {
			return $this->searchOperation;
		}

		/**
		* @return int
		*/
		public function getLimit() {
			return $this->limit;
		}

		/**
		* @return int
		*/
		public function getOffset() {
			return $this->offset;
		}

		/**
		* @return ISearchOrder[]
		*/
		public function getOrder() {
			return $this->order;
		}

		/**
		* @return ?IUser
		*/
		public function getUser() {
			return $this->user;
		}

		public function limitToHome(): bool {
			return $this->limitToHome;
		}
	}


	use OCP\Files\Search\ISearchComparison;

	/**
	* @psalm-import-type ParamValue from ISearchComparison
	*/
	class SearchComparison implements ISearchComparison {
		private array $hints = [];

		public function __construct(
			private string $type,
			private string $field,
			/** @var ParamValue $value */
			private \DateTime|int|string|bool|array $value,
			private string $extra = '',
		) {
		}

		/**
		* @return string
		*/
		public function getType(): string {
			return $this->type;
		}

		/**
		* @return string
		*/
		public function getField(): string {
			return $this->field;
		}

		public function getValue(): string|int|bool|\DateTime|array {
			return $this->value;
		}

		/**
		* @return string
		* @since 28.0.0
		*/
		public function getExtra(): string {
			return $this->extra;
		}

		public function getQueryHint(string $name, $default) {
			return $this->hints[$name] ?? $default;
		}

		public function setQueryHint(string $name, $value): void {
			$this->hints[$name] = $value;
		}

		public static function escapeLikeParameter(string $param): string {
			return addcslashes($param, '\\_%');
		}

		public function __toString(): string {
			return $this->field . ' ' . $this->type . ' ' . json_encode($this->value);
		}
	}


	use OCP\Files\Search\ISearchBinaryOperator;
	use OCP\Files\Search\ISearchOperator;

	class SearchBinaryOperator implements ISearchBinaryOperator {
		/** @var string */
		private $type;
		/** @var (SearchBinaryOperator|SearchComparison)[] */
		private $arguments;
		private $hints = [];

		/**
		* SearchBinaryOperator constructor.
		*
		* @param string $type
		* @param (SearchBinaryOperator|SearchComparison)[] $arguments
		*/
		public function __construct($type, array $arguments) {
			$this->type = $type;
			$this->arguments = $arguments;
		}

		/**
		* @return string
		*/
		public function getType() {
			return $this->type;
		}

		/**
		* @return ISearchOperator[]
		*/
		public function getArguments() {
			return $this->arguments;
		}

		/**
		* @param ISearchOperator[] $arguments
		* @return void
		*/
		public function setArguments(array $arguments): void {
			$this->arguments = $arguments;
		}

		public function getQueryHint(string $name, $default) {
			return $this->hints[$name] ?? $default;
		}

		public function setQueryHint(string $name, $value): void {
			$this->hints[$name] = $value;
		}

		public function __toString(): string {
			if ($this->type === ISearchBinaryOperator::OPERATOR_NOT) {
				return '(not ' . $this->arguments[0] . ')';
			}
			return '(' . implode(' ' . $this->type . ' ', $this->arguments) . ')';
		}
	}
}

namespace OCA\DAV\Connector\Sabre {
    class Node extends \Sabre\Dav\INode {
        public function getNode(): \OCP\Files\Node { }
        public function getId(): int {}
    }
    class File extends Node {}
    class Directory extends Node {}
}

namespace Doctrine\DBAL\Exception {
    class UniqueConstraintViolationException extends \Exception {}
}

namespace OCA\Files\Event {
	use OCP\EventDispatcher\Event;

	class LoadSidebar extends Event {
	}
}

namespace OCA\DAV\Events {
	use OCP\EventDispatcher\Event;
	use Sabre\DAV\Server;

	/**
	* @since 20.0.0
	*/
	class SabrePluginAuthInitEvent extends Event {

		/** @var Server */
		private $server;

		/**
		* @since 20.0.0
		*/
		public function __construct(Server $server);

		/**
		* @since 20.0.0
		*/
		public function getServer(): Server;
	}
}

namespace OCA\Viewer\Event {
	use OCP\EventDispatcher\Event;

	/**
	* This event is triggered whenever the viewer is loaded and extensions should be loaded.
	*
	* @since 17.0.0
	* @psalm-immutable
	*/
	class LoadViewer extends Event {
	}
}

namespace OC\User {
	class NoUserException extends \Exception {
	}
}

